[21/10/2009] EditableGrid v1.0.0
================================

First stable public release, including the following main features:
- load grid from an XML file or attach to an existing HTML table
- edit cells with a suitable editor (string, integer, double, boolean, email, date)
- built-in renderers for dates, emails and numbers
- built-in validators for numeric values, emails and dates
- possibility to plug your own cell renderers, editors and validators 
- possibility to declare a list of possible values for each column (static in XML, or dynamic in Javascript)
- sort columns accordingly to their types, by clicking on the header

This release has been successfully tested on: Firefox 3.0 and 3.5, Internet Explorer 7 and 8, Safari 4, Google Chrome

[23/10/2009] EditableGrid v1.0.1
================================

Changed the XML loading method on Firefox: we use XMLHttpRequest which seems more reliable than document.implementation.

[02/11/2009] EditableGrid v1.0.2
================================

Several editable grids can now safely be put on the same page:
- you have to give a name when creating the EditableGrid instance (this name is used to prefix the row ids in the DOM in order to keep them unique)
- to retrieve the row id in database (ie. the row id you gave in your XML or HTML grid definition) you have to use the new method "getRowId"

Bugfixes: 
- if you edited a cell then went to another tab in Firefox, the previous value was put back into the cell.

[05/11/2009] EditableGrid v1.0.3
================================

The loadXML method now loads custom attributes that may have been set on the rows in the XML.
The user can consult these attributes using the new method getRowAttribute(rowIndex, attributeName).

Bugfixes:
- fixed the removeRow method that had been broken in version 1.0.2
- it is now possible to call loadXML several times: the table contents will be replaced when calling renderGrid

[22/12/2009] EditableGrid v1.0.4
================================

1) The values stored in the model are converted according to the column type (boolean, integer and double).
   This eg. means that your render functions will always get a real javascript Number or Boolean.

2) Added a simple PHP wrapper that you can use to generate the grid XML data if you work with PHP on the server side.

   This PHP class has two public methods:
   - addColumn($name, $label, $type, $values = NULL, $editable = true, $field = NULL)
   - renderXML($rows, $customRowAttributes=array()) 

   The $rows argument in renderXML can be an array of objects of an array of arrays. 

3) You can more easily inherit from an built-in cell renderer, for example:
     grid.setCellRenderer("mycolumn", new CheckboxCellRenderer({render: function(cell, value) {
	   CheckboxCellRenderer.prototype.render.call(this, cell, value); // call base method
	   // your code here
     }}));

   Also, if you inherit from CheckboxCellRenderer, your render function will now be called each time the checbox is (un)checked.

4) Improved attaching to an existing HTML table:
   - added a flag Column.renderable that can be used to prevent EditableGrid to call the render function for this column
   - the row passed to modelChanged was incorrect if the TBODY contained other child nodes than TR
   - fixed the example so that the action column is not editable

5) Other minor fixes and improvements:
   - added method getRowIndex(rowId)
   - when using sortEnable=true (which is the default), the sort header is disabled for columns with type 'html'
   - the checkboxes in boolean columns are now centered (ie. the css style named 'boolean' is applied)
   - an error message is displayed if the XML cannot be loaded
   - fixed error occuring when an editable grid was itself in a table
   
[12/01/2010] EditableGrid v1.0.5
================================
 
- Replacing HTML special characters is not done when generating the XML, but before calling the cell renderers
- Removed annoying effect when sorting: images used to indicate the sorting order are preloaded + only impacted colum headers are refreshed

[05/02/2010] EditableGrid v1.0.6
================================

- Error message "Could not load XML" is not displayed anymore because it can happen normally when leaving a page too quickly
- We use htmlspecialchars instead of htmlentities for rendering string cells, it's sufficient
- Fixed display of "&quot;" on Google Chrome
- Custom XML attributes can be encoded in base64 by EditableGrid.php

[01/04/2010] EditableGrid v1.0.7
================================

Bugfixes:
- fixed the display of the cell editor when the table was in a div with overflow (ie. with scrollbars)
- the "number" class (ie. bold and right-aligned) is applied to all numeric cells (ie. including the ones having enumerated values)
- all editors of numeric cells are aligned to the right, as well as their content (ie. including the ones having enumerated values)
- getTypedValue casts the value as a string if this is a string column: not doing so could lead to problems on Google Chrome (because "" == 0 returns true in Chrome)
- fixed some incorrect parameter descriptions and comments in the generated html documentation
- the bug in Google Chrome Linux that caused html select input to disappear when cliking on them (if allowSimultaneouEdition was false) has been fixed (I mean fixed in last version of Google!) 

Features:
- you can now redefine a cell editor like this: setCellEditor(new CellEditor({ getEditor: .... }));
- added callback method isEditable(rowIndex, columnIndex) to dynamically control cell editability
- it is now possible to have cell editors for the column headers: to achieve this, you have to redefine isEditable and return true when rowIndex < 0, then use setHeaderEditor
- you can now set adaptHeight and/or adaptWidth booleans on SelectCellEditor to auto-adapt input to the cell dimensions (default is true)
- you can set minWidth on SelectCellEditor to impose a minimal width (expressed in px, default is 100)
- the table headers can now contain several rows (but still only the first one will be rendered using defined HeaderCellRenderer)
- if no length is given in the datatype (eg. string(24)), text input fields will auto adapt their width to the table cell
- numeric cells (NumbercellEditor) will also by default auto-adapt themselves to the cell width
- text and numeric input fields will auto adapt their-height to the table cell (but only if this cell has a height > 24)
- added parameter maxlen (default: 10 for dates, 32 for numeric values, 255 otherwise)

Advanced:
- added method getRow(rowIndex) that returns the HTML row object
- added method getColumn(columnIndexOrName)
- getColumnName and getColumnType also accept a column name as input
- when an error "Invalid column" is displayed, the name of the calling method is given
- the checkDate function also give a MySQL ready date yyyy-mm-dd ('dbDate' attribute)
- you can now easily specify custom attributes in the constructor of CellRenderer, CellEditor and EnumProvider, eg. new CellRenderer { myAttribute: ..., render: ... }

[23/07/2010] EditableGrid v1.0.8
================================

Charts
------

Corrigé affichage du pourcentage des les pie charts si valeurs NAN dans le tas
Workaround un peu strange mais qui marche pour le probleme de l'echelle Y pas correcte au 1er affichage (se produisait aussi sur IE8).
Corrigé la détection de la largeur du chart sur IE8 (car getStyle('width') renvoyait 'auto')
Dans un pie chart on affiche le pourcentage entre parenthèses
Si on passe un titre vide à renderPieChart il est utilisé
renderPieChart ne fait rien et renvoie 0 si aucune valeur à afficher
Ajouté param legend à renderBarChart (def = label de la colonne)
Pie chart ignore les valeurs NaN
ajouté une option ignoreLastRow pour le tri et les charts (pie et bar)
Ajouté atrribut bar à Column, défaut true, lu du xml, méthode isColumnBar utilisée dans renderBarChart. 
Amélioré l'auto-détection de ymax pour l'axis y.
si la largeur ou hauteur du chart est 0, on utilise des dimensions par défaut pour éviter que le gars pense que ça ne marche pas.
autodetect openflashchart swf location, only once
le texte de la légende est le label de la colonne qui sert à avoir les labels de l'axe X
renderBar/PieChart vérifient que les librairies nécessaires sont bien là...uniquement la 1ere fois.
renderBar/PieChart vérifient que les librairies nécessaires sont bien là
renommé renderChart en renderBarChart: ne prend plus le type mais prend par contre le titre et l'index de la colonne qui sert de label (defaut = 0)
ajouté méthode renderPieChart(divId, title, valueColumnIndexOrName, labelColumnIndexOrName, startAngle) (factorisé mise à jour du swf dans méthode updateChart)
ajouté méthode clearChart, à implémenter
renderChart détermine la valeur max pour Y
renderChart does not force element key font size
méthode renderChart en travaux mais fonctionnelle (bar3d uniquement)

Types
-----

Meilleure gestion des NaN pour les double et integer: la valeur stockée dans le modèle est toujours un number, qui peut être NaN. 
Dans ce cas, on affichera un string vide dans le renderer, ou le symbôle specifié dans le type via eg. double(€, 2, -) en non bold. 
Pour compatibilité, NumberCellRenderer respected les éventuelles valeurs non number qui lui seraient passées. 
Dans l'éditeur on affichera un string vide (via méthode abstraite TextCellEditor.editorValue). 
NumberCellRenderer affiche bien les valeurs 0, avec unité et précision (et non un string vide).

L'unité n'est plus spécifiée via un attribut spécifique, mais dans le type comme la précision: double(m), double(2) ou double(m, 2). 
Le type est 'parsé' aussi bien en mode HTML qu'en mode XML. 
Protégé NumberCellRenderer si jamais on l'appelle avec le mauvais this (ie. si on fait render(...) au lieu de render.call(this, ...). 
Commenté dans la démo le renderer qui ne servait qu'à afficher l'unité: remplacé par un type double(m, 2).

Ajouté les attributs 'unit' et 'precision' à Column.
- unit et precision sont utilisés dans NumberCellRenderer pour arrondir et suffixer la valeur réelle avec l'unite
- precision est utilisée pour passer à TextCellEditor: elle donne la longeur forcée du champ texte
En mode XML, unit est donné via l'attribut 'unit' et precision est donné via 'datatype', eg. 'double(2)' ou 'string(24)'. 
On extrait la précision au moment de la lecture du XML, et non plus dans createCellEditor comme avant. 
Plus besoin donc de tester le type avec startsWith, '==' suffit. 
En mode HTML, on donne directement 'unit' et 'precision': eg. string('24') n'est donc plus accepté.

Other
-----

Escape les labels de colonnes
EditableGrid.php takes encoding as a parameter.
Fixes on IE8 (editors etc)
corrigé adjust au scroll pour cellules de type number
CheckBoxCellRenderer set isEditing = true avant d'appeler applyEditing
Avant un apply/cancelEditing on supprime le onblur sinon il est appelé en boucle car render provoque une suppression du htmlinput qui appelle onblur
Fixed getColumnIndex for column names which are numbers
Ajouté isHeaderEditable pour que les gens ne doivent pas mettre rowIndex >= 0 dans leur isEditable
Ajouté column.isNumerical utilisé à 3 endroits
getValueAt: check colonne + si row < 0 renvoie le column label 
sort n'appelle plus getValueAt avec rowIndex = -1 quand on "unsort"
setValueAt renvoie la valeur précédente
plus besoin de element.originalValue: on utilise getValueAt quand on annule une édition et la previous value renvoyée par setValueAt pour passer à modelChanged
corrigé CheckboxCellRenderer pour changer l'étau de la checkbox quand il est appelé (eg. après un updatecellvalue qui s'est mal passé)
Corrigé passage de custom attributes
Only replace double spaces by &nbsp;
Added sort()
dans le constructeur on peut passer ses propres attributs
ajouté méthode isColumnNumerical + NumberCellRenderer utilise addClass pour conserver les classes existantes
ajouté méthode setCaption (caption utilisée dans renderGrid XML)
CellRenderer remplace les espaces en nbsp;
Dissocié méthode getXML et renderXML dans wrapper PHP.
Amélioré la détection de changement de valeur via isSame (NaN===NaN). De plus, c'est la véritable valeur typée du modèle qui est passée à modelChanged
Les cellules number ont le style nowrap
don't handle click on images
=> Corrigé l'édition dans user/tracker ou customer (colonne country) car j'ignorais les clics sur les images. 
   A la place je remonte jusqu'à rencontrer un link ou une cellule. 
   Si c'est un link je ne fais rien (les images à ignorer, eg. collapse/expand doivent donc être mises dans un link).
padding de 5px pour cellules 'number' + 'smart' max value pour y axis (10 steps) 
Ajouté callback readonlyWarning pour les colonnes non éditables.
TextCellEditor peut prendre une config
modelChanged called only when needed (ie. when value changed)
Ajouté option saveOnBlur par défaut true (nb: cette option n'a de sens que si allowSimultaneousEdition vaut false).
getRowIndex accepte un objet row
Modification de la méthode renderGrid afin de pouvoir donner un ID à la table. 
Fix in EnumCellRenderer:; value 0 or null can be valid!
corrigé autoHeight pour select: on ajuste -=2 que pour les text + impose une minHeight de 22
callback tableSorted
on utilise la même fonte dans les input que pour le contenu de la cellule + corrigé l'alignement à droite des input numériques au cas où on a un padding-left
amélioré la détection automatique de la largeur et de la hauteur des input dans les cellules.
Position editor inputs on the cells with the same padding as the actual cell content.
This prevents an unwanted left padding when editing costs in user_tracker in Timetrack.
getRowIndex silently returns -1 if null row (ie. rows with this id does not exist)
Error message in getRowIndex if null row