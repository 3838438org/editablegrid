[21/10/2009] EditableGrid v1.0.0
================================

First stable public release, including the following main features:
- load grid from an XML file or attach to an existing HTML table
- edit cells with a suitable editor (string, integer, double, boolean, email, date)
- built-in renderers for dates, emails and numbers
- built-in validators for numeric values, emails and dates
- possibility to plug your own cell renderers, editors and validators 
- possibility to declare a list of possible values for each column (static in XML, or dynamic in Javascript)
- sort columns accordingly to their types, by clicking on the header

This release has been successfully tested on: Firefox 3.0 and 3.5, Internet Explorer 7 and 8, Safari 4, Google Chrome

[23/10/2009] EditableGrid v1.0.1
================================

Changed the XML loading method on Firefox: we use XMLHttpRequest which seems more reliable than document.implementation.

[02/11/2009] EditableGrid v1.0.2
================================

Several editable grids can now safely be put on the same page:
- you have to give a name when creating the EditableGrid instance (this name is used to prefix the row ids in the DOM in order to keep them unique)
- to retrieve the row id in database (ie. the row id you gave in your XML or HTML grid definition) you have to use the new method "getRowId"

Bugfixes: 
- if you edited a cell then went to another tab in Firefox, the previous value was put back into the cell.

[05/11/2009] EditableGrid v1.0.3
================================

The loadXML method now loads custom attributes that may have been set on the rows in the XML.
The user can consult these attributes using the new method getRowAttribute(rowIndex, attributeName).

Bugfixes:
- fixed the removeRow method that had been broken in version 1.0.2
- it is now possible to call loadXML several times: the table contents will be replaced when calling renderGrid

[22/12/2009] EditableGrid v1.0.4
================================

1) The values stored in the model are converted according to the column type (boolean, integer and double).
   This eg. means that your render functions will always get a real javascript Number or Boolean.

2) Added a simple PHP wrapper that you can use to generate the grid XML data if you work with PHP on the server side.

   This PHP class has two public methods:
   - addColumn($name, $label, $type, $values = NULL, $editable = true, $field = NULL)
   - renderXML($rows, $customRowAttributes=array()) 

   The $rows argument in renderXML can be an array of objects of an array of arrays. 

3) You can more easily inherit from an built-in cell renderer, for example:
     grid.setCellRenderer("mycolumn", new CheckboxCellRenderer({render: function(cell, value) {
	   CheckboxCellRenderer.prototype.render.call(this, cell, value); // call base method
	   // your code here
     }}));

   Also, if you inherit from CheckboxCellRenderer, your render function will now be called each time the checbox is (un)checked.

4) Improved attaching to an existing HTML table:
   - added a flag Column.renderable that can be used to prevent EditableGrid to call the render function for this column
   - the row passed to modelChanged was incorrect if the TBODY contained other child nodes than TR
   - fixed the example so that the action column is not editable

5) Other minor fixes and improvements:
   - added method getRowIndex(rowId)
   - when using sortEnable=true (which is the default), the sort header is disabled for columns with type 'html'
   - the checkboxes in boolean columns are now centered (ie. the css style named 'boolean' is applied)
   - an error message is displayed if the XML cannot be loaded
   - fixed error occuring when an editable grid was itself in a table
   
[12/01/2010] EditableGrid v1.0.5
================================
 
- Replacing HTML special characters is not done when generating the XML, but before calling the cell renderers
- Removed annoying effect when sorting: images used to indicate the sorting order are preloaded + only impacted colum headers are refreshed

[05/02/2010] EditableGrid v1.0.6
================================

- Error message "Could not load XML" is not displayed anymore because it can happen normally when leaving a page too quickly
- We use htmlspecialchars instead of htmlentities for rendering string cells, it's sufficient
- Fixed display of "&quot;" on Google Chrome
- Custom XML attributes can be encoded in base64 by EditableGrid.php

[01/04/2010] EditableGrid v1.0.7
================================

Bugfixes:
- fixed the display of the cell editor when the table was in a div with overflow (ie. with scrollbars)
- the "number" class (ie. bold and right-aligned) is applied to all numeric cells (ie. including the ones having enumerated values)
- all editors of numeric cells are aligned to the right, as well as their content (ie. including the ones having enumerated values)
- getTypedValue casts the value as a string if this is a string column: not doing so could lead to problems on Google Chrome (because "" == 0 returns true in Chrome)
- fixed some incorrect parameter descriptions and comments in the generated html documentation
- the bug in Google Chrome Linux that caused html select input to disappear when cliking on them (if allowSimultaneouEdition was false) has been fixed (I mean fixed in last version of Google!) 

Features:
- you can now redefine a cell editor like this: setCellEditor(new CellEditor({ getEditor: .... }));
- added callback method isEditable(rowIndex, columnIndex) to dynamically control cell editability
- it is now possible to have cell editors for the column headers: to achieve this, you have to redefine isEditable and return true when rowIndex < 0, then use setHeaderEditor
- you can now set adaptHeight and/or adaptWidth booleans on SelectCellEditor to auto-adapt input to the cell dimensions (default is true)
- you can set minWidth on SelectCellEditor to impose a minimal width (expressed in px, default is 100)
- the table headers can now contain several rows (but still only the first one will be rendered using defined HeaderCellRenderer)
- if no length is given in the datatype (eg. string(24)), text input fields will auto adapt their width to the table cell
- numeric cells (NumbercellEditor) will also by default auto-adapt themselves to the cell width
- text and numeric input fields will auto adapt their-height to the table cell (but only if this cell has a height > 24)
- added parameter maxlen (default: 10 for dates, 32 for numeric values, 255 otherwise)

Advanced:
- added method getRow(rowIndex) that returns the HTML row object
- added method getColumn(columnIndexOrName)
- getColumnName and getColumnType also accept a column name as input
- when an error "Invalid column" is displayed, the name of the calling method is given
- the checkDate function also give a MySQL ready date yyyy-mm-dd ('dbDate' attribute)
- you can now easily specify custom attributes in the constructor of CellRenderer, CellEditor and EnumProvider, eg. new CellRenderer { myAttribute: ..., render: ... } 